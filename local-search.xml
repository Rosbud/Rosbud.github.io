<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP语言基础</title>
    <link href="/2020/07/30/PHP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/07/30/PHP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>这篇文章简单对PHP的各种常用基础知识进行介绍，以理解为重点，省略大部分运行情况</p><h2 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h2><h3 id="nbsp-nbsp-数据结构"><a href="#nbsp-nbsp-数据结构" class="headerlink" title="&nbsp;&nbsp;数据结构"></a>&nbsp;&nbsp;数据结构</h3><h4 id="nbsp-nbsp-nbsp-nbsp-数据类型"><a href="#nbsp-nbsp-nbsp-nbsp-数据类型" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;数据类型"></a>&nbsp;&nbsp;&nbsp;&nbsp;数据类型</h4><p>&nbsp; 1.1 <strong>boolean</strong></p><p>&nbsp; &nbsp; <code>$boo = true</code>    将变量命名为布尔型<br>&nbsp; 1.2 <strong>string</strong></p><p>&nbsp; &nbsp; <code>$a = &#39;字符串&#39;</code> 单引号的变量按普通字符串输出</p><p>&nbsp; &nbsp; <code>$a = &quot;字符串&quot;</code>    双引号中包含的变量会被自动替换成实际数值</p><p>&nbsp; &nbsp; <code>$string = &lt;&lt;&lt;str    要输出的字符    str</code>    输出字符，效果同双引号</p><p>&nbsp; 1.3 <strong>integer</strong></p><p>&nbsp; &nbsp; 可以声明十进制、八进制和十六进制整数</p><p>&nbsp; 1.4 <strong>float</strong></p><p>&nbsp; &nbsp; 提供两种书写格式：标准格式和科学计数法（例 3.58E1,87E-3）</p><p>&nbsp; 1.5 <strong>array</strong></p><p>&nbsp; &nbsp; 一组数据的集合</p><p>&nbsp; &nbsp; 语法格式：<code>$array = array(&#39;value1&#39;,&#39;value2&#39;)</code> 或 <code>$array[key]=&#39;value&#39;</code> 或 <code>$array = array(key1 =&gt; value1,key2=&gt;value2)</code></p><p>&nbsp; &nbsp; 其中 <strong>key</strong> 是数组元素的下标， <strong>value</strong> 是数组下标对应的元素</p><p>&nbsp; 1.6 <strong>object</strong></p><p>&nbsp; &nbsp; 面向对象和面向过程</p><p>&nbsp; 1.7 <strong>特殊数据类型</strong></p><p>&nbsp; 资源（resource）和空值（null）</p><pre><code>&gt;资源：又叫句柄，保存了到外部资源的一个引用&gt;空值：表示变量没有值&gt;unset()：销毁指定的变量</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-数据类型转换"><a href="#nbsp-nbsp-nbsp-nbsp-数据类型转换" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;数据类型转换"></a>&nbsp;&nbsp;&nbsp;&nbsp;数据类型转换</h4><p>&nbsp; &nbsp; 变量前加上 <strong>小括号</strong> 括起来的类型即可</p><pre><code>(boolean)$sum 、(inter)$boo</code></pre><p>&nbsp; &nbsp; 函数 <strong>settype（）</strong> 完成</p><pre><code>bool settype(mixed var,string type)</code></pre><p>&nbsp; &nbsp; <strong>var</strong>  —— 指定的变量</p><p>&nbsp; &nbsp; <strong>type</strong> —— 指定的类型（boolean、float、integer、array、null、object、string）</p><p>&nbsp; &nbsp; 转换成功返回 true 失败则 false</p><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-检测数据类型"><a href="#nbsp-nbsp-nbsp-nbsp-检测数据类型" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;检测数据类型"></a>&nbsp;&nbsp;&nbsp;&nbsp;检测数据类型</h4><p>&nbsp; &nbsp; PHP内有许多内置函数关于检测，为 <strong>is</strong> 系列</p><pre><code>is_bool ; is_string ; is_float ; is_int ; is_null ; is_array ; is_null ; is_object ; is_numeric(检测是否为数字或者由数字组成的字符串)</code></pre><p>&nbsp; </p><h3 id="nbsp-nbsp-常量"><a href="#nbsp-nbsp-常量" class="headerlink" title="&nbsp;&nbsp;常量"></a>&nbsp;&nbsp;常量</h3><h4 id="nbsp-nbsp-nbsp-nbsp-声明和使用"><a href="#nbsp-nbsp-nbsp-nbsp-声明和使用" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;声明和使用"></a>&nbsp;&nbsp;&nbsp;&nbsp;声明和使用</h4><p>&nbsp;&nbsp;使用 <strong>define()</strong> 来定常量</p><pre><code>define(string constant_name,mixed value,case_sensitive=false)constant_name : 必选参数，常量名称，即标识符value : 必选参数，常量的值case_sensitive : 可选参数，指定是否大小写敏感，true则不敏感</code></pre><p>&nbsp;&nbsp;获取常量设置的值有两种方法，一种是使用常量名输出，另一种是使用函数 <strong>constant()</strong> 输出</p><pre><code>mixed constant(string const_name)const_name : 常量名，成功则返回常量的值，失败则输出错误</code></pre><p>&nbsp;&nbsp;判断常量是否被定义可以使用 <strong>defined()</strong> 函数</p><pre><code>bool defined(string constant_name)constant_name : 常量名称，存在则返回true，否则是false</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-预定义常量"><a href="#nbsp-nbsp-nbsp-nbsp-预定义常量" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;预定义常量"></a>&nbsp;&nbsp;&nbsp;&nbsp;预定义常量</h4><p>&nbsp;&nbsp;PHP中有系统预定义常量</p><pre><code>__FILE__ : php程序文件名__LINE__ : php程序行数PHP_VERSION : php版本PHP_OS : 执行解析php的操作系统TRUE or FALSE or NULL : 布尔值和空值E_ERROR : 指到最近错误处E_WARNING : 指到最近警告处E_PARSE : 指到解析语法有潜在问题处E_NOTICE : 不寻常处提示</code></pre><p>&nbsp;</p><h3 id="nbsp-nbsp-PHP变量"><a href="#nbsp-nbsp-PHP变量" class="headerlink" title="&nbsp;&nbsp;PHP变量"></a>&nbsp;&nbsp;PHP变量</h3><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-变量声明及使用"><a href="#nbsp-nbsp-nbsp-nbsp-变量声明及使用" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;变量声明及使用"></a>&nbsp;&nbsp;&nbsp;&nbsp;变量声明及使用</h4><p>&nbsp;&nbsp;变量名称由 <strong>$</strong> 和 <strong>标识符</strong> 组成。标识符由字母、数字或下划线组成，且不能以数字开头。</p><p>&nbsp;&nbsp;变量赋值一般有直接赋值，还有变量间赋值。</p><pre><code>直接赋值和其他语言一样引用赋值在变量前加上 &amp; 符号取其他变量的地址区别：直接赋值是开辟新的内存空间，引用赋值则是多一个名字</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-变量作用域"><a href="#nbsp-nbsp-nbsp-nbsp-变量作用域" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;变量作用域"></a>&nbsp;&nbsp;&nbsp;&nbsp;变量作用域</h4><p>&nbsp;&nbsp;php和其他语言一样有局部变量，全局变量(<strong>global</strong>)和静态变量(<strong>static</strong>)</p><pre><code>全局变量：被定义在所有函数之外静态变量：能够在函数调用结束后仍然保留变量值，再次回到作用域时，可继续使用</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-可变变量"><a href="#nbsp-nbsp-nbsp-nbsp-可变变量" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;可变变量"></a>&nbsp;&nbsp;&nbsp;&nbsp;可变变量</h4><p>&nbsp;&nbsp;允许动态改变变量名称（套娃变量）</p><pre><code>$animal = &apos;turtles&apos;;      $turtles = 103;echo $$animal;则会输出103数字</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-PHP预定义变量"><a href="#nbsp-nbsp-nbsp-nbsp-PHP预定义变量" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;PHP预定义变量"></a>&nbsp;&nbsp;&nbsp;&nbsp;PHP预定义变量</h4><pre><code>$_GET — HTTP GET 变量$_POST — HTTP POST 变量$_FILES — HTTP 文件上传变量$_REQUEST — HTTP Request 变量$_SESSION — Session 变量$_COOKIE — HTTP Cookies，多数由setcookie()函数设置$_SERVER[&apos;REMOTE_ADDR&apos;] —— 浏览当前页面的用户的 IP 地址$_SERVER[&apos;SERVER_ADDR&apos;] —— 当前运行脚本所在的服务器的 IP 地址。$_SERVER[&apos;SERVER_NAME&apos;] —— 当前运行脚本所在的服务器的主机名$_SERVER[&apos;SERVER_PORT&apos;] —— 服务器使用的端口$_SERVER[&apos;DOCUMENT_ROOT&apos;] —— 当前运行脚本所在的文档根目录。在服务器配置文件中定义。$_SERVER[&apos;PHP_SELF&apos;] —— 获取当前网页地址（不含域名部分）$_SERVER[&apos;QUERY_STRING&apos;] —— 获取当前网页地址中的所有get数据（就是？号后面的部分），但只是一个整体的字符串而已$_SERVER[&apos;SCRIPT_FILENAME&apos;] —— 当前执行脚本的绝对路径$_SERVER[&apos;SERVER_SIGNATURE&apos;] —— 包含服务器版本和虚拟主机名的字符串</code></pre><p>&nbsp;</p><h3 id="nbsp-nbsp-PHP运算符"><a href="#nbsp-nbsp-PHP运算符" class="headerlink" title="&nbsp;&nbsp;PHP运算符"></a>&nbsp;&nbsp;PHP运算符</h3><h4 id="nbsp-nbsp-nbsp-nbsp-算术运算符"><a href="#nbsp-nbsp-nbsp-nbsp-算术运算符" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;算术运算符"></a>&nbsp;&nbsp;&nbsp;&nbsp;算术运算符</h4><p>&nbsp;&nbsp;主要有 <strong>+</strong>   <strong>-</strong> * <strong>/</strong> <strong>%</strong><br>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-字符串运算符"><a href="#nbsp-nbsp-nbsp-nbsp-字符串运算符" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;字符串运算符"></a>&nbsp;&nbsp;&nbsp;&nbsp;字符串运算符</h4><p>&nbsp;&nbsp;只有一个为英文的 <strong>.</strong> 将两个字符串连接起来。<br>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-赋值运算符"><a href="#nbsp-nbsp-nbsp-nbsp-赋值运算符" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;赋值运算符"></a>&nbsp;&nbsp;&nbsp;&nbsp;赋值运算符</h4><p>&nbsp;&nbsp;基本运算符 <strong>=</strong> 将右边的值赋给左边的变量，可配合算数运算符<br>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-递增-递减运算符"><a href="#nbsp-nbsp-nbsp-nbsp-递增-递减运算符" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;递增/递减运算符"></a>&nbsp;&nbsp;&nbsp;&nbsp;递增/递减运算符</h4><p>&nbsp;&nbsp;运算符 <strong>++</strong> 和 <strong>–</strong> 效果和其他语言相似<br>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-位运算符"><a href="#nbsp-nbsp-nbsp-nbsp-位运算符" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;位运算符"></a>&nbsp;&nbsp;&nbsp;&nbsp;位运算符</h4><p>&nbsp;&nbsp;二进制位从低到高的运算</p><pre><code>&amp;    按位与|    按位或^    按位异或~    按位取反&lt;&lt;  向左移位&gt;&gt;  向右移位</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-逻辑运算符"><a href="#nbsp-nbsp-nbsp-nbsp-逻辑运算符" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;逻辑运算符"></a>&nbsp;&nbsp;&nbsp;&nbsp;逻辑运算符</h4><p>&nbsp;&nbsp;用来组合逻辑运算的结果</p><pre><code>&amp;&amp; 或 and    逻辑与|| 或 or        逻辑或xor            逻辑异或！            逻辑非</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-比较运算符"><a href="#nbsp-nbsp-nbsp-nbsp-比较运算符" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;比较运算符"></a>&nbsp;&nbsp;&nbsp;&nbsp;比较运算符</h4><p>&nbsp;&nbsp;对变量或表达式的结果进行大小真假的比较，真则true，假则false</p><pre><code>不常见的主要是 === 和 ！== ，这两个符号不仅判断数值，还判断数值的数据类型</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-条件运算符"><a href="#nbsp-nbsp-nbsp-nbsp-条件运算符" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;条件运算符"></a>&nbsp;&nbsp;&nbsp;&nbsp;条件运算符</h4><p>&nbsp;&nbsp;<strong>(?:)</strong> 也称三目运算符，<strong>?</strong> 为前为判断表达式，真则进入 <strong>:</strong> 前的表达式，假则进入 <strong>：</strong> 后的<br>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-运算符优先级"><a href="#nbsp-nbsp-nbsp-nbsp-运算符优先级" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;运算符优先级"></a>&nbsp;&nbsp;&nbsp;&nbsp;运算符优先级</h4><p>&nbsp;&nbsp;查表即可<br>&nbsp;</p><h3 id="nbsp-nbsp-PHP函数"><a href="#nbsp-nbsp-PHP函数" class="headerlink" title="&nbsp;&nbsp;PHP函数"></a>&nbsp;&nbsp;PHP函数</h3><h4 id="nbsp-nbsp-nbsp-nbsp-定义和调用函数"><a href="#nbsp-nbsp-nbsp-nbsp-定义和调用函数" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;定义和调用函数"></a>&nbsp;&nbsp;&nbsp;&nbsp;定义和调用函数</h4><p>&nbsp;&nbsp;函数，即将重复调用的功能卸载独立一个模块内</p><pre><code>创建函数基本语法格式：function fun_name($str1,...$strn){    fun_body}function    为声明自定义函数时必须使用的关键字fun_name    为自定义函数名$strn        为函数参数</code></pre><p>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-函数间传递参数"><a href="#nbsp-nbsp-nbsp-nbsp-函数间传递参数" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;函数间传递参数"></a>&nbsp;&nbsp;&nbsp;&nbsp;函数间传递参数</h4><p>&nbsp;&nbsp;1. 按值传递：    传参在函数定义域内值改变不影响外部</p><p>&nbsp;&nbsp;2. 按引用传递：     传参时加上 <strong>&amp;</strong> 将参数内存地址传入，函数定义域内外参数的值都会改变</p><p>&nbsp;&nbsp;3. 默认参数：    一般放在参数列表末尾，并指定默认值<br>&nbsp;</p><h4 id="nbsp-nbsp-nbsp-nbsp-函数返回值"><a href="#nbsp-nbsp-nbsp-nbsp-函数返回值" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;函数返回值"></a>&nbsp;&nbsp;&nbsp;&nbsp;函数返回值</h4><p>&nbsp;&nbsp;用 <strong>return</strong> 返回一个值，只能一个值，若要多个则需要创建数组</p><h4 id="nbsp-nbsp-nbsp-nbsp-变量函数"><a href="#nbsp-nbsp-nbsp-nbsp-变量函数" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;变量函数"></a>&nbsp;&nbsp;&nbsp;&nbsp;变量函数</h4><p>&nbsp;&nbsp;基本效果如同可变变量一样（套娃）<br>&nbsp;<br>&nbsp;<br>&nbsp;</p><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="nbsp-nbsp-条件控制语句"><a href="#nbsp-nbsp-条件控制语句" class="headerlink" title="&nbsp;&nbsp;条件控制语句"></a>&nbsp;&nbsp;条件控制语句</h3><p>&nbsp;&nbsp;包括 <strong>if</strong> , <strong>if else</strong> , <strong>elseif</strong> , <strong>switch</strong> </p><h3 id="nbsp-nbsp-循环控制语句"><a href="#nbsp-nbsp-循环控制语句" class="headerlink" title="&nbsp;&nbsp;循环控制语句"></a>&nbsp;&nbsp;循环控制语句</h3><p>&nbsp;&nbsp;</p>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/30/hello-world/"/>
    <url>/2020/07/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>&nbsp; </p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
